---
# Pipeline will only trigger when something is pushed to main branch 
workflow:  
    rules:
      - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
        when: never
      - when: always

# List of variables
variables:
  TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}
  TF_HTTP_LOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}/lock
  TF_HTTP_UNLOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}/lock
  TF_HTTP_LOCK_METHOD: "POST"
  TF_HTTP_UNLOCK_METHOD: "DELETE"
  TF_HTTP_USERNAME: "gitlab-ci-token"
  TF_HTTP_PASSWORD: ${GITLAB_TOKEN}
  TF_HTTP_RETRY_WAIT_MIN: "5"
  TF_VAR_do_token: ${do_token}
  TF_VAR_privat: ${privatekeypath}
  TF_VAR_public: ${publicekeypath}
# Image which will use in each stage
image:
  name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/stable:latest"
  entrypoint: [""]


# Script to be executed before each stage 
before_script:
  - terraform --version
  - export GITLAB_TOKEN=$GITLAB_TOKEN
  -    
  - echo $do_token
  - echo $GITLAB_TOKEN
  - ls -la
  #- cd ${TF_DIR}  && ls -la  # To get inside the working directory
  # - terraform init  -reconfigure  -backend-config=address="${TF_HTTP_ADDRESS}"  -backend-config=lock_address="${TF_HTTP_LOCK_ADDRESS}"  -backend-config=unlock_address="${TF_HTTP_UNLOCK_ADDRESS}"  -backend-config=username="${TF_HTTP_USERNAME}"  -backend-config=password="${GITLAB_TOKEN}"  -backend-config=lock_method="${TF_HTTP_LOCK_METHOD}"  -backend-config=unlock_method="${TF_HTTP_UNLOCK_METHOD}"  -backend-config=retry_wait_min="${TF_HTTP_RETRY_WAIT_MIN}"
  # - mkdir -p ~/.ssh
  # - chmod 700 ~/.ssh
  # - eval $(ssh-agent -s)
  # - ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519
  # - ls -la ~/.ssh

cache:
  key: tf
  paths:
    - .terraform
    - .terraform.lock.hcl

stages:
  - prepare
  - validate
  - plan
  - apply
  - destroy
 
init:
  stage: prepare
  script:
    - gitlab-terraform init
  only:  
    - merge_requests
    - main
 
validate:
  stage: validate
  script:
    - gitlab-terraform validate
  only:  
    - merge_requests
    - main
 
plan:
  stage: plan
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    paths:
      - plan.cache
    reports:
      terraform: plan.json

  only:  
    - merge_requests
    - main 

deploy:
  stage: apply
  script:
    - ls -al
    - gitlab-terraform apply
  dependencies:              
    - plan
  # when: manual
  only:
    - main
    
destroy:
  stage: destroy
  script:
    - gitlab-terraform destroy
  dependencies:          
    - plan
    - deploy
  when: manual
  only:
    - main

# validate:
#   stage: validate
#   script:
#     - terraform validate
#   cache:
#     key: ${CI_COMMIT_REF_NAME}
#     paths:
#     - ${TF_DIR}/.terraform
#     policy: pull-push

# plan:
#   stage: plan
#   script:
#     - terraform plan 
#   dependencies:
#     - validate
#   cache:
#     key: ${CI_COMMIT_REF_NAME}
#     paths:
#     - ${TF_DIR}/.terraform
#     policy: pull


# apply:
#   stage: apply
#   script:
#     - terraform apply  -auto-approve
#   dependencies:
#     - plan
#   cache:
#     key: ${CI_COMMIT_REF_NAME}
#     paths:
#     - ${TF_DIR}/.terraform
#     policy: pull

# destroy:
#   stage: destroy
#   script:
#     - terraform destroy  -auto-approve
#   dependencies:
#     - plan
#     - apply
#   cache:
#     key: ${CI_COMMIT_REF_NAME}
#     paths:
#     - ${TF_DIR}/.terraform
#     policy: pull
#   when: manual