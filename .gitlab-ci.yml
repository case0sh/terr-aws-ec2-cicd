---
# Pipeline will only trigger when something is pushed to main branch 
workflow:  
    rules:
      - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
        when: never
      - when: always

# List of variables
variables:
  PROJECT_PATH: ${CI_PROJECT_DIR} 
  ENV_NAME: "dev"
  CI_API_V4_URL: https://gitlab.com/api/v4
  CI_PROJECT_ID: ${PROJECT_PATH//\//%2f}

  TF_HTTP_ADDRESS: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/$ENV_NAME"
  TF_HTTP_LOCK_ADDRESS: "${TF_HTTP_ADDRESS}/lock"
  TF_HTTP_LOCK_METHOD: "POST"
  TF_HTTP_UNLOCK_ADDRESS: "${TF_HTTP_ADDRESS}/lock"
  TF_HTTP_UNLOCK_METHOD: "DELETE"
  TF_HTTP_USERNAME: "case0sh"
  TF_HTTP_RETRY_WAIT_MIN: "5"
  TF_HTTP_PASSWORD: "YOUR-ACCESS-TOKEN"
# Stages of the pipeline
stages:
  - validate
  - plan
  - apply
  - destroy

# Image which will use in each stage
image:
  name: registry.hub.docker.com/hashicorp/terraform:light
  entrypoint: [""]

# Script to be executed before each stage 
before_script:
  - terraform --version
  - export GITLAB_TOKEN=$TOKEN
  - cd ${TF_DIR}            # To get inside the working directory
  - terraform init  -reconfigure  -backend-config=address="${TF_HTTP_ADDRESS}"  -backend-config=lock_address="${TF_HTTP_LOCK_ADDRESS}"  -backend-config=unlock_address="${TF_HTTP_UNLOCK_ADDRESS}"  -backend-config=username="${TF_HTTP_USERNAME}"  -backend-config=password="${GITLAB_TOKEN}"  -backend-config=lock_method="${TF_HTTP_LOCK_METHOD}"  -backend-config=unlock_method="${TF_HTTP_UNLOCK_METHOD}"  -backend-config=retry_wait_min="${TF_HTTP_RETRY_WAIT_MIN}"
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - eval $(ssh-agent -s)
  - ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519
  - ls -la ~/.ssh



validate:
  stage: validate
  script:
    - terraform validate
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull-push

plan:
  stage: plan
  script:
    - terraform plan 
  dependencies:
    - validate
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull


apply:
  stage: apply
  script:
    - terraform apply  -auto-approve
  dependencies:
    - plan
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull

destroy:
  stage: destroy
  script:
    - terraform destroy  -auto-approve
  dependencies:
    - plan
    - apply
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull
  when: manual