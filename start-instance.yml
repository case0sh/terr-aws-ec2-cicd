#cloud-config
package_update: true
package_upgrade: true
groups:
  - docker

system_info:
  default_user:
    groups: [ docker ]

packages:
  - nginx
  - nftables
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - unattended-upgrades
  - git 
  - vim 
  - hugo
  
# write_files:
#   - path: /home/ubuntu/backup.sh
#   # content text must be indented
#     content: |
#       #!/bin/bash
#       # Set variables
#       S3_BUCKET="projectzomboid-server"
#       BACKUP_DIR="/home/ubuntu/projectzomboid-server"
#       TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
#       # Backup website files to a tar archive
#       cd $BACKUP_DIR
#       tar -czf website_$TIMESTAMP.tar.gz /home/ubuntu/projectzomboid-server
#       # Upload the backup to Amazon S3
#       aws s3 cp website_$TIMESTAMP.tar.gz s3://$S3_BUCKET/backups/
#       # Delete old backups
#       aws s3 ls s3://$S3_BUCKET/backups/ | awk '{print $4}' | sort | head -n -4 | while read old_backup; do aws s3 rm s3://$S3_BUCKET/backups/$old_backup; done
      
#   - path: /home/ubuntu/restore.sh
#   # content text must be indented
#     content: |
#       #!/bin/bash

#       # Set variables
#       S3_BUCKET="projectzomboid-server"
#       BACKUP_DIR="/home/ubuntu/projectzomboid-server"
#       # Download the latest backup from Amazon S3
#       aws s3 ls s3://$S3_BUCKET/backups/ | awk '{print $4}' | sort | tail -n 1 | while read latest_backup; do aws s3 cp s3://$S3_BUCKET/backups/$latest_backup $BACKUP_DIR; done
#       # Extract the backup files
#       cd $BACKUP_DIR
#       tar -xzf website_*.tar.gz -C /home/ubuntu/projectzomboid-server --strip-components=2

runcmd:
  - systemctl enable nftables.service
  - systemctl start nftables.service
  - echo "#!/usr/sbin/nft -f" > /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "flush ruleset" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "table inet filter {" >> /etc/nftables.conf
  - echo "  chain input {" >> /etc/nftables.conf
  - echo "    type filter hook input priority 0;" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    iifname \"lo\" accept" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    ct state established,related accept" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    tcp dport 22 accept" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    tcp dport 80 accept" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    tcp dport 443 accept" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    tcp dport {2376,2377,7946} accept" >> /etc/nftables.conf
  - echo "    udp dport {7946,4789} accept" >> /etc/nftables.conf
  - echo "" >> /etc/nftables.conf
  - echo "    drop" >> /etc/nftables.conf
  - echo "  }" >> /etc/nftables.conf
  - echo "}" >> /etc/nftables.conf
  - systemctl restart nftables.service
  - mkdir -p /etc/apt/keyrings
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  - systemctl enable docker
  - systemctl start docker
  - systemctl enable docker.service
  - systemctl start docker.service
  
final_message: "The system is finally up, after $UPTIME seconds"
